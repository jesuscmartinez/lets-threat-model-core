from typing import List, Dict
from pydantic import BaseModel, Field
from uuid import UUID, uuid4
from core.models.dtos.File import File
import os
import logging

# Configure logging
log_level = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=log_level,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


class Component(BaseModel):
    """
    Represents a system component, which could be a process, data store, or external entity.
    """

    id: UUID = Field(default_factory=uuid4, description="UUID for the component.")
    name: str = Field(..., description="Name of the component (e.g., 'Login Flow').")
    description: str = Field(
        ..., description="Description of what the component represents."
    )

    def __hash__(self):
        return hash(self.id)

    def __eq__(self, other):
        return isinstance(other, Component) and self.id == other.id

    def model_dump(self, **kwargs):
        data = super().model_dump(**kwargs)
        data["id"] = str(self.id)

        return data


class DataFlow(Component):
    """
    Describes a data flow between components, including its destination, type of data, and direction.
    """

    destination_id: UUID = Field(
        ..., description="The target component_id of the data flow."
    )
    data_type: str = Field(
        ...,
        description="A description of the data being transferred (e.g., 'Product Review Data').",
    )
    direction: str = Field(
        ...,
        description="Indicates whether the flow is a read, incoming, outgoing, write or bidirectional relative to the source.",
    )

    def __hash__(self):
        return hash(self.id)

    def __eq__(self, other):
        return isinstance(other, DataFlow) and self.id == other.id

    def model_dump(self, **kwargs):
        data = super().model_dump(**kwargs)
        data["destination_id"] = str(self.destination_id)

        return data


class Node(Component):
    """
    Represents a node in the system that can have associated data flows.
    """

    data_flows: List[DataFlow] = Field(
        default_factory=list,
        description="Set of DataFlows associated with this external entity.",
    )

    def __hash__(self):
        return hash(self.id)

    def __eq__(self, other):
        return isinstance(other, Node) and self.id == other.id


class ExternalEntity(Node):
    """
    Represents an external entity that interacts with the system, such as a user or a third-party service.
    Inherits from Node, and thus can have associated data flows.
    """

    def __hash__(self):
        return hash(self.id)

    def __eq__(self, other):
        return isinstance(other, ExternalEntity) and self.id == other.id


class Process(Node):
    """
    Represents a process within the system that handles data.
    A process receives input data, performs actions, and produces output data.
    """

    input_data: List[str] = Field(
        default_factory=list,
        description="Specific data or triggers received by the process.",
    )
    output_data: List[str] = Field(
        default_factory=list, description="Results or outputs generated by the process."
    )

    def __hash__(self):
        return hash(self.id)

    def __eq__(self, other):
        return isinstance(other, Process) and self.id == other.id


class DataStore(Node):
    """
    Represents a data storage component within the system.
    It tracks the data written to and retrieved from the store.
    """

    data_inputs: List[str] = Field(
        default_factory=list, description="List of data written to the store."
    )
    data_outputs: List[str] = Field(
        default_factory=list, description="List of data retrieved from the store."
    )

    def __hash__(self):
        return hash(self.id)

    def __eq__(self, other):
        return isinstance(other, DataStore) and self.id == other.id


class TrustBoundary(Component):
    """
    Defines a trust boundary within the system, grouping components that share a common security context.
    This helps delineate which components fall within the same security perimeter.
    """

    component_ids: List[UUID] = Field(
        default_factory=list,
        description="Set of component_ids within this trust boundary, referencing existing components.",
    )

    def model_dump(self, **kwargs):
        data = super().model_dump(**kwargs)
        data["component_ids"] = [str(id) for id in self.component_ids]

        return data

    def __hash__(self):
        return hash(self.id)

    def __eq__(self, other):
        return isinstance(other, TrustBoundary) and self.id == other.id


class AgentDataFlowReport(BaseModel):
    """
    Provides a comprehensive report of the system's data flows.
    This includes an overview and detailed lists of external entities, processes, data stores, and trust boundaries.
    """

    overview: str = Field(
        default="No overview provided.", description="Overview of the data flow report."
    )
    external_entities: List[ExternalEntity] = Field(
        default_factory=list,
        description="A set of external entities interacting with the system.",
    )
    processes: List[Process] = Field(
        default_factory=list, description="A set of processes in the system."
    )
    data_stores: List[DataStore] = Field(
        default_factory=list,
        description="A set of data stores locations in the system.",
    )

    trust_boundaries: List[TrustBoundary] = Field(
        default_factory=list,
        description="A set of trust boundaries in the system.",
    )

    def __hash__(self):
        return hash(self.overview)

    def __eq__(self, other):
        if not isinstance(other, AgentDataFlowReport):
            return False
        return self.overview == other.overview

    class Config:
        from_attributes = True
        json_schema_extra = {
            "example": {
                "overview": "This is an example of a data flow report.",
                "external_entities": [
                    {
                        "id": "uuid_1",
                        "name": "User",
                        "description": "A person interacting with the system.",
                        "data_flows": [
                            {
                                "id": "uuid_2",
                                "name": "User Login Flow",
                                "description": "Data flow from the client to authentication process.",
                                "destination_id": "uuid_3",
                                "data_type": "Login Credentials",
                                "direction": "outgoing",
                            }
                        ],
                    }
                ],
                "processes": [
                    {
                        "id": "uuid_3",
                        "name": "Authentication",
                        "description": "Handles user login.",
                        "input_data": ["Username", "Password"],
                        "output_data": ["JWT Token"],
                        "data_flows": [
                            {
                                "id": "uuid_5",
                                "name": "User Login Flow",
                                "description": "Data flow from the frontend to authentication service.",
                                "destination_id": "uuid_4",
                                "data_type": "Login Credentials",
                                "direction": "outgoing",
                            },
                            {
                                "id": "uuid_6",
                                "name": "Authentication Flow",
                                "description": "Data flow from the authentication service to the user",
                                "destination_id": "uuid_1",
                                "data_type": "Authentication Token",
                                "direction": "outgoing",
                            },
                        ],
                    }
                ],
                "data_stores": [
                    {
                        "id": "uuid_4",
                        "name": "User Database",
                        "description": "Stores all user data.",
                        "data_inputs": ["User registration details"],
                        "data_outputs": ["User authentication details"],
                        "data_flows": [
                            {
                                "id": "uuid_7",
                                "name": "User Login Data",
                                "description": "Data flow from the data store service to the authentication process.",
                                "destination_id": "uuid_2",
                                "data_type": "Authentication Token",
                                "direction": "outgoing",
                            }
                        ],
                    }
                ],
                "trust_boundaries": [
                    {
                        "id": "uuid_8",
                        "name": "User Boundary",
                        "description": "Separates the client-side interface.",
                        "component_ids": [
                            "uuid_1",
                        ],
                    },
                    {
                        "id": "uuid_5",
                        "name": "Application Boundary",
                        "description": "Separates the backend-side interface.",
                        "component_ids": [
                            "uuid_2",
                            "uuid_3",
                        ],
                    },
                ],
            }
        }


class DataFlowReport(AgentDataFlowReport):
    """
    Extends AgentDataFlowReport by including metadata related to file review processes.
    This model adds unique identifiers and categorizes files based on their review status.
    """

    id: UUID = Field(
        default_factory=uuid4, description="Unique identifier for the data flow report."
    )
    repository_id: UUID = Field(
        default_factory=uuid4, description="Unique identifier for the repository."
    )
    should_review: List[File] = Field(
        default_factory=list, description="Set of Files requiring review."
    )
    reviewed: List[File] = Field(
        default_factory=list, description="Set of Files that have been reviewed."
    )
    could_review: List[File] = Field(
        default_factory=list, description="Set of Files that could be reviewed."
    )
    should_not_review: List[File] = Field(
        default_factory=list, description="Set of Files that should not be reviewed."
    )
    could_not_review: List[File] = Field(
        default_factory=list, description="Set of Files that could not be reviewed."
    )
    diagram: str = Field(
        default="",
        description="A string representation of the diagram for visualization purposes.",
    )

    def __hash__(self):
        return hash(self.id)

    def __eq__(self, other):
        return isinstance(other, DataFlowReport) and self.id == other.id

    def model_dump(self, **kwargs):
        data = super().model_dump(**kwargs)
        data["id"] = str(self.id)
        data["repository_id"] = str(self.repository_id)

        return data

    class Config:
        from_attributes = True
